[{"/Users/kal/Documents/dndexample/dnd/src/index.tsx":"1","/Users/kal/Documents/dndexample/dnd/src/example.ts":"2","/Users/kal/Documents/dndexample/dnd/src/Container.tsx":"3","/Users/kal/Documents/dndexample/dnd/src/ItemTypes.ts":"4","/Users/kal/Documents/dndexample/dnd/src/Card.tsx":"5"},{"size":400,"mtime":1653403464697,"results":"6","hashOfConfig":"7"},{"size":51,"mtime":1653403464697,"results":"8","hashOfConfig":"7"},{"size":2312,"mtime":1653406765096,"results":"9","hashOfConfig":"7"},{"size":45,"mtime":1653403464696,"results":"10","hashOfConfig":"7"},{"size":1612,"mtime":1653404677770,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1gty0u9",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/kal/Documents/dndexample/dnd/src/index.tsx",[],[],"/Users/kal/Documents/dndexample/dnd/src/example.ts",[],[],"/Users/kal/Documents/dndexample/dnd/src/Container.tsx",["29","30","31"],[],"import update from \"immutability-helper\";\nimport type { FC } from \"react\";\nimport { memo, useCallback, useState } from \"react\";\nimport { useDrop } from \"react-dnd\";\n\nimport { Card } from \"./Card\";\nimport { ItemTypes } from \"./ItemTypes\";\n\nconst style = {\n  width: 400,\n};\n\nexport interface ContainerState {\n  cards: any[];\n}\n\ntype Item = {\n  id: string\n  text:string\n}\n\nconst ITEMS = [\n  {\n    id: 1,\n    text: \"Write a cool JS library\",\n  },\n  {\n    id: 2,\n    text: \"Make it generic enough\",\n  },\n  {\n    id: 3,\n    text: \"Write README\",\n  },\n  {\n    id: 4,\n    text: \"Create some examples\",\n  },\n  {\n    id: 5,\n    text: \"Spam in Twitter and IRC to promote it\",\n  },\n  {\n    id: 6,\n    text: \"???\",\n  },\n  {\n    id: 7,\n    text: \"PROFIT\",\n  },\n];\n\nexport const Container: FC = memo(function Container() {\n  const [cards, setCards] = useState(ITEMS);\n  console.log(cards);\n\n  // const [areas, setAreas] = useState( [{\n  //   id: 8,\n  //   text: \"Something borrowed something new\",\n  // }]);\n\n  const [areas, setAreas] = useState<Array<Item>>([]);\n\n  const [] = useDrop({\n    accept: ItemTypes.CARD,\n  });\n\n  const findCard = useCallback(\n    (id: string) => {\n      const card = cards.filter((c) => `${c.id}` === id)[0] as {\n        id: number;\n        text: string;\n      };\n      return {\n        card,\n        index: cards.indexOf(card),\n      };\n    },\n    [cards]\n  );\n\n  const moveCard = useCallback(\n    (id: string, atIndex: number) => {\n      const { card, index } = findCard(id);\n      setCards(\n        update(cards, {\n          $splice: [\n            [index, 1],\n            [atIndex, 0, card],\n          ],\n        })\n      );\n    },\n    [findCard, cards, setCards]\n  );\n\n  const getGroup = () => {\n    return (\n      areas.map((card,idx) => (\n        <Card\n          key={card.id}\n          id={`${card.id}`}\n          text={card.text}\n          moveCard={moveCard}\n          findCard={findCard}\n        />\n      ))\n    )\n  }\n\n  return (\n    <>\n      {cards.map((card) => (\n        <Card\n          key={card.id}\n          id={`${card.id}`}\n          text={card.text}\n          moveCard={moveCard}\n          findCard={findCard}\n        />\n      ))}\n      <div style={{ border: \"solid 1px\", height: \"35px\", marginTop: \"50px\" }}>\n        {areas.length>0 && getGroup()}\n      </div>\n    </>\n  );\n});\n","/Users/kal/Documents/dndexample/dnd/src/ItemTypes.ts",[],[],"/Users/kal/Documents/dndexample/dnd/src/Card.tsx",[],[],[],{"ruleId":"32","severity":1,"message":"33","line":9,"column":7,"nodeType":"34","messageId":"35","endLine":9,"endColumn":12},{"ruleId":"32","severity":1,"message":"36","line":62,"column":17,"nodeType":"34","messageId":"35","endLine":62,"endColumn":25},{"ruleId":"37","severity":1,"message":"38","line":64,"column":9,"nodeType":"39","messageId":"40","endLine":64,"endColumn":11},"@typescript-eslint/no-unused-vars","'style' is assigned a value but never used.","Identifier","unusedVar","'setAreas' is assigned a value but never used.","no-empty-pattern","Unexpected empty array pattern.","ArrayPattern","unexpected"]