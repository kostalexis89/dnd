{"ast":null,"code":"var _jsxFileName = \"/Users/kal/Documents/dndexample/dnd/src/Container.tsx\",\n    _s = $RefreshSig$();\n\nimport update from 'immutability-helper';\nimport { memo, useCallback, useState } from 'react';\nimport { Card } from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst style = {\n  width: 400\n};\nconst ITEMS = [{\n  id: 1,\n  text: 'Write a cool JS library'\n}, {\n  id: 2,\n  text: 'Make it generic enough'\n}, {\n  id: 3,\n  text: 'Write README'\n}, {\n  id: 4,\n  text: 'Create some examples'\n}, {\n  id: 5,\n  text: 'Spam in Twitter and IRC to promote it'\n}, {\n  id: 6,\n  text: '???'\n}, {\n  id: 7,\n  text: 'PROFIT'\n}];\nexport const Container = /*#__PURE__*/_s( /*#__PURE__*/memo(_c = _s(function Container() {\n  _s();\n\n  const [cards, setCards] = useState(ITEMS);\n  const findCard = useCallback(id => {\n    const card = cards.filter(c => `${c.id}` === id)[0];\n    return {\n      card,\n      index: cards.indexOf(card)\n    };\n  }, [cards]);\n  const moveCard = useCallback((id, atIndex) => {\n    const {\n      card,\n      index\n    } = findCard(id);\n    setCards(update(cards, {\n      $splice: [[index, 1], [atIndex, 0, card]]\n    }));\n  }, [findCard, cards, setCards]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n        id: `${card.id}`,\n        text: card.text,\n        moveCard: moveCard,\n        findCard: findCard\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this))\n    }, void 0, false)\n  }, void 0, false);\n}, \"h1OTaiRPLYmBrSKouC7TQ+erET0=\")), \"h1OTaiRPLYmBrSKouC7TQ+erET0=\");\n_c2 = Container;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Container$memo\");\n$RefreshReg$(_c2, \"Container\");","map":{"version":3,"names":["update","memo","useCallback","useState","Card","style","width","ITEMS","id","text","Container","cards","setCards","findCard","card","filter","c","index","indexOf","moveCard","atIndex","$splice","map"],"sources":["/Users/kal/Documents/dndexample/dnd/src/Container.tsx"],"sourcesContent":["import update from 'immutability-helper'\nimport type { FC } from 'react'\nimport { memo, useCallback, useState } from 'react'\nimport { useDrop } from 'react-dnd'\n\nimport { Card } from './Card'\nimport { ItemTypes } from './ItemTypes'\n\nconst style = {\n  width: 400,\n}\n\nexport interface ContainerState {\n  cards: any[]\n}\n\nconst ITEMS = [\n  {\n    id: 1,\n    text: 'Write a cool JS library',\n  },\n  {\n    id: 2,\n    text: 'Make it generic enough',\n  },\n  {\n    id: 3,\n    text: 'Write README',\n  },\n  {\n    id: 4,\n    text: 'Create some examples',\n  },\n  {\n    id: 5,\n    text: 'Spam in Twitter and IRC to promote it',\n  },\n  {\n    id: 6,\n    text: '???',\n  },\n  {\n    id: 7,\n    text: 'PROFIT',\n  },\n]\n\nexport const Container: FC = memo(function Container() {\n  const [cards, setCards] = useState(ITEMS)\n\n  const findCard = useCallback(\n    (id: string) => {\n      const card = cards.filter((c) => `${c.id}` === id)[0] as {\n        id: number\n        text: string\n      }\n      return {\n        card,\n        index: cards.indexOf(card),\n      }\n    },\n    [cards],\n  )\n\n  const moveCard = useCallback(\n    (id: string, atIndex: number) => {\n      const { card, index } = findCard(id)\n      setCards(\n        update(cards, {\n          $splice: [\n            [index, 1],\n            [atIndex, 0, card],\n          ],\n        }),\n      )\n    },\n    [findCard, cards, setCards],\n  )\n\n  return (\n    <>\n    <>\n      {cards.map((card) => (\n        <Card\n          key={card.id}\n          id={`${card.id}`}\n          text={card.text}\n          moveCard={moveCard}\n          findCard={findCard}\n        />\n      ))}\n    </>\n    </>\n\n  )\n})\n"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,qBAAnB;AAEA,SAASC,IAAT,EAAeC,WAAf,EAA4BC,QAA5B,QAA4C,OAA5C;AAGA,SAASC,IAAT,QAAqB,QAArB;;;AAGA,MAAMC,KAAK,GAAG;EACZC,KAAK,EAAE;AADK,CAAd;AAQA,MAAMC,KAAK,GAAG,CACZ;EACEC,EAAE,EAAE,CADN;EAEEC,IAAI,EAAE;AAFR,CADY,EAKZ;EACED,EAAE,EAAE,CADN;EAEEC,IAAI,EAAE;AAFR,CALY,EASZ;EACED,EAAE,EAAE,CADN;EAEEC,IAAI,EAAE;AAFR,CATY,EAaZ;EACED,EAAE,EAAE,CADN;EAEEC,IAAI,EAAE;AAFR,CAbY,EAiBZ;EACED,EAAE,EAAE,CADN;EAEEC,IAAI,EAAE;AAFR,CAjBY,EAqBZ;EACED,EAAE,EAAE,CADN;EAEEC,IAAI,EAAE;AAFR,CArBY,EAyBZ;EACED,EAAE,EAAE,CADN;EAEEC,IAAI,EAAE;AAFR,CAzBY,CAAd;AA+BA,OAAO,MAAMC,SAAa,iCAAGT,IAAI,SAAC,SAASS,SAAT,GAAqB;EAAA;;EACrD,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAACI,KAAD,CAAlC;EAEA,MAAMM,QAAQ,GAAGX,WAAW,CACzBM,EAAD,IAAgB;IACd,MAAMM,IAAI,GAAGH,KAAK,CAACI,MAAN,CAAcC,CAAD,IAAQ,GAAEA,CAAC,CAACR,EAAG,EAAR,KAAcA,EAAlC,EAAsC,CAAtC,CAAb;IAIA,OAAO;MACLM,IADK;MAELG,KAAK,EAAEN,KAAK,CAACO,OAAN,CAAcJ,IAAd;IAFF,CAAP;EAID,CAVyB,EAW1B,CAACH,KAAD,CAX0B,CAA5B;EAcA,MAAMQ,QAAQ,GAAGjB,WAAW,CAC1B,CAACM,EAAD,EAAaY,OAAb,KAAiC;IAC/B,MAAM;MAAEN,IAAF;MAAQG;IAAR,IAAkBJ,QAAQ,CAACL,EAAD,CAAhC;IACAI,QAAQ,CACNZ,MAAM,CAACW,KAAD,EAAQ;MACZU,OAAO,EAAE,CACP,CAACJ,KAAD,EAAQ,CAAR,CADO,EAEP,CAACG,OAAD,EAAU,CAAV,EAAaN,IAAb,CAFO;IADG,CAAR,CADA,CAAR;EAQD,CAXyB,EAY1B,CAACD,QAAD,EAAWF,KAAX,EAAkBC,QAAlB,CAZ0B,CAA5B;EAeA,oBACE;IAAA,uBACA;MAAA,UACGD,KAAK,CAACW,GAAN,CAAWR,IAAD,iBACT,QAAC,IAAD;QAEE,EAAE,EAAG,GAAEA,IAAI,CAACN,EAAG,EAFjB;QAGE,IAAI,EAAEM,IAAI,CAACL,IAHb;QAIE,QAAQ,EAAEU,QAJZ;QAKE,QAAQ,EAAEN;MALZ,GACOC,IAAI,CAACN,EADZ;QAAA;QAAA;QAAA;MAAA,QADD;IADH;EADA,iBADF;AAgBD,CAhDgC,kCAAP,iCAAnB;MAAME,S"},"metadata":{},"sourceType":"module"}