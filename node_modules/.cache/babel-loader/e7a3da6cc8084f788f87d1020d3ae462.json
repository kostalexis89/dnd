{"ast":null,"code":"var _jsxFileName = \"/Users/kal/Documents/dndexample/dnd/src/Card.tsx\",\n    _s = $RefreshSig$();\n\nimport { memo } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport { ItemTypes } from './ItemTypes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst style = {\n  border: '1px dashed gray',\n  padding: '0.5rem 1rem',\n  marginBottom: '.5rem',\n  backgroundColor: 'white',\n  cursor: 'move'\n};\nexport const Card = /*#__PURE__*/_s( /*#__PURE__*/memo(_c = _s(function Card(_ref) {\n  _s();\n\n  let {\n    id,\n    text,\n    moveCard,\n    findCard\n  } = _ref;\n  const originalIndex = findCard(id).index;\n  const [{\n    isDragging\n  }, drag] = useDrag(() => ({\n    type: ItemTypes.CARD,\n    item: {\n      id,\n      originalIndex\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    }),\n    end: (item, monitor) => {\n      const {\n        id: droppedId,\n        originalIndex\n      } = item;\n      const didDrop = monitor.didDrop();\n\n      if (!didDrop) {\n        moveCard(droppedId, originalIndex);\n      }\n    }\n  }), [id, originalIndex, moveCard]);\n  const [, drop] = useDrop(() => ({\n    accept: ItemTypes.CARD // hover({ id: draggedId }: Item) {\n    //   if (draggedId !== id) {\n    //     const { index: overIndex } = findCard(id)\n    //     moveCard(draggedId, overIndex)\n    //   }\n    // },\n\n  }), [findCard, moveCard]);\n  const opacity = isDragging ? 0 : 1;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: node => drag(drop(node)),\n    style: { ...style,\n      opacity\n    },\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}, \"FSfJ4ie57JY5to1rF8fuHph4Yps=\", false, function () {\n  return [useDrag, useDrop];\n})), \"FSfJ4ie57JY5to1rF8fuHph4Yps=\", false, function () {\n  return [useDrag, useDrop];\n});\n_c2 = Card;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Card$memo\");\n$RefreshReg$(_c2, \"Card\");","map":{"version":3,"names":["memo","useDrag","useDrop","ItemTypes","style","border","padding","marginBottom","backgroundColor","cursor","Card","id","text","moveCard","findCard","originalIndex","index","isDragging","drag","type","CARD","item","collect","monitor","end","droppedId","didDrop","drop","accept","opacity","node"],"sources":["/Users/kal/Documents/dndexample/dnd/src/Card.tsx"],"sourcesContent":["import type { CSSProperties, FC } from 'react'\nimport { memo } from 'react'\nimport { useDrag, useDrop } from 'react-dnd'\n\nimport { ItemTypes } from './ItemTypes'\n\nconst style: CSSProperties = {\n  border: '1px dashed gray',\n  padding: '0.5rem 1rem',\n  marginBottom: '.5rem',\n  backgroundColor: 'white',\n  cursor: 'move',\n}\n\nexport interface CardProps {\n  id: string\n  text: string\n  moveCard: (id: string, to: number) => void\n  findCard: (id: string) => { index: number }\n}\n\ninterface Item {\n  id: string\n  originalIndex: number\n}\n\nexport const Card: FC<CardProps> = memo(function Card({\n  id,\n  text,\n  moveCard,\n  findCard,\n}) {\n  const originalIndex = findCard(id).index\n  const [{ isDragging }, drag] = useDrag(\n    () => ({\n      type: ItemTypes.CARD,\n      item: { id, originalIndex },\n      collect: (monitor) => ({\n        isDragging: monitor.isDragging(),\n      }),\n      end: (item, monitor) => {\n        const { id: droppedId, originalIndex } = item\n        const didDrop = monitor.didDrop()\n        if (!didDrop) {\n          moveCard(droppedId, originalIndex)\n        }\n      },\n    }),\n    [id, originalIndex, moveCard],\n  )\n\n  const [, drop] = useDrop(\n    () => ({\n      accept: ItemTypes.CARD,\n      // hover({ id: draggedId }: Item) {\n      //   if (draggedId !== id) {\n      //     const { index: overIndex } = findCard(id)\n      //     moveCard(draggedId, overIndex)\n      //   }\n      // },\n    }),\n    [findCard, moveCard],\n  )\n\n  const opacity = isDragging ? 0 : 1\n  return (\n    <div ref={(node) => drag(drop(node))} style={{ ...style, opacity }}>\n      {text}\n    </div>\n  )\n})\n"],"mappings":";;;AACA,SAASA,IAAT,QAAqB,OAArB;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,WAAjC;AAEA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,MAAMC,KAAoB,GAAG;EAC3BC,MAAM,EAAE,iBADmB;EAE3BC,OAAO,EAAE,aAFkB;EAG3BC,YAAY,EAAE,OAHa;EAI3BC,eAAe,EAAE,OAJU;EAK3BC,MAAM,EAAE;AALmB,CAA7B;AAoBA,OAAO,MAAMC,IAAmB,iCAAGV,IAAI,SAAC,SAASU,IAAT,OAKrC;EAAA;;EAAA,IALmD;IACpDC,EADoD;IAEpDC,IAFoD;IAGpDC,QAHoD;IAIpDC;EAJoD,CAKnD;EACD,MAAMC,aAAa,GAAGD,QAAQ,CAACH,EAAD,CAAR,CAAaK,KAAnC;EACA,MAAM,CAAC;IAAEC;EAAF,CAAD,EAAiBC,IAAjB,IAAyBjB,OAAO,CACpC,OAAO;IACLkB,IAAI,EAAEhB,SAAS,CAACiB,IADX;IAELC,IAAI,EAAE;MAAEV,EAAF;MAAMI;IAAN,CAFD;IAGLO,OAAO,EAAGC,OAAD,KAAc;MACrBN,UAAU,EAAEM,OAAO,CAACN,UAAR;IADS,CAAd,CAHJ;IAMLO,GAAG,EAAE,CAACH,IAAD,EAAOE,OAAP,KAAmB;MACtB,MAAM;QAAEZ,EAAE,EAAEc,SAAN;QAAiBV;MAAjB,IAAmCM,IAAzC;MACA,MAAMK,OAAO,GAAGH,OAAO,CAACG,OAAR,EAAhB;;MACA,IAAI,CAACA,OAAL,EAAc;QACZb,QAAQ,CAACY,SAAD,EAAYV,aAAZ,CAAR;MACD;IACF;EAZI,CAAP,CADoC,EAepC,CAACJ,EAAD,EAAKI,aAAL,EAAoBF,QAApB,CAfoC,CAAtC;EAkBA,MAAM,GAAGc,IAAH,IAAWzB,OAAO,CACtB,OAAO;IACL0B,MAAM,EAAEzB,SAAS,CAACiB,IADb,CAEL;IACA;IACA;IACA;IACA;IACA;;EAPK,CAAP,CADsB,EAUtB,CAACN,QAAD,EAAWD,QAAX,CAVsB,CAAxB;EAaA,MAAMgB,OAAO,GAAGZ,UAAU,GAAG,CAAH,GAAO,CAAjC;EACA,oBACE;IAAK,GAAG,EAAGa,IAAD,IAAUZ,IAAI,CAACS,IAAI,CAACG,IAAD,CAAL,CAAxB;IAAsC,KAAK,EAAE,EAAE,GAAG1B,KAAL;MAAYyB;IAAZ,CAA7C;IAAA,UACGjB;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CA5CsC;EAAA,QAONX,OAPM,EAyBpBC,OAzBoB;AAAA,GAAP;EAAA,QAOCD,OAPD,EAyBbC,OAzBa;AAAA,EAAzB;MAAMQ,I"},"metadata":{},"sourceType":"module"}